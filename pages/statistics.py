import streamlit as st
import subprocess
import re
import pandas as pd
import asyncio
from datetime import datetime
from bs4 import BeautifulSoup
from utils.data_processing import async_get_profiles_from_guild
from playwright.async_api import async_playwright, TimeoutError
from utils.data_processing import async_main


# –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chromium (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
try:
    subprocess.run(["playwright", "install", "chromium"], check=True)
except Exception as e:
    st.write("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ playwright chromium:", e)

def parse_date(date_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú' –≤ –æ–±—ä–µ–∫—Ç datetime."""
    return datetime.strptime(date_str, "%d.%m.%Y %H:%M")

def clean_nickname(raw_text):
    """–û—á–∏—â–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""
    nickname = raw_text.strip()
    if "–ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞" in nickname:
        nickname = nickname.replace("–ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", "").strip()
    if "‚Äì" in nickname:
        nickname = nickname.split("‚Äì")[0].strip()
    elif "-" in nickname:
        nickname = nickname.split("-")[0].strip()
    return nickname

async def process_profile(context, profile_url, filter_from, filter_to, computed_stats):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    page = await context.new_page()
    nickname = await async_get_nickname(page, profile_url)
    wins, draws, losses = await async_collect_stats_for_profile(page, profile_url, filter_from, filter_to, computed_stats)
    await page.close()
    return profile_url, nickname, wins, draws, losses

async def async_main(mode_choice, target_url, filter_from, filter_to, login, password):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π"""
    computed_stats = {}
    results = []

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        page = await context.new_page()

        try:
            await page.goto("https://11x11.ru/", timeout=15000, wait_until="domcontentloaded")
        except Exception:
            st.write("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return []

        await page.fill("input[name='auth_name']", login)
        await page.fill("input[name='auth_pass1']", password)
        await page.click("xpath=//input[@type='submit' and @value='–í–æ–π—Ç–∏']")

        try:
            await page.wait_for_selector("xpath=//a[contains(text(), '–í—ã—Ö–æ–¥')]", timeout=15000)
        except Exception:
            st.write("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞")
            return []

        if mode_choice == "–ü—Ä–æ—Ñ–∏–ª—é":
            profile_url, nickname, wins, draws, losses = await process_profile(context, target_url, filter_from, filter_to, computed_stats)
            results.append({
                "–ü—Ä–æ—Ñ–∏–ª—å": f'<a href="{profile_url}" target="_blank">{nickname}</a>',
                "–ü–æ–±–µ–¥": wins,
                "–ù–∏—á—å–∏—Ö": draws,
                "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": losses
            })
        else:
            profile_tuples = await async_get_profiles_from_guild(page, target_url)
            if not profile_tuples:
                await page.close()
                await context.close()
                await browser.close()
                return []

            semaphore = asyncio.Semaphore(10)
            async def sem_process(profile_url):
                async with semaphore:
                    return await process_profile(context, profile_url, filter_from, filter_to, computed_stats)

            tasks = [sem_process(profile_url) for (profile_url, _) in profile_tuples]
            profiles_results = await asyncio.gather(*tasks)

            dedup = {}
            for pr in profiles_results:
                profile_url, nickname, wins, draws, losses = pr
                match = re.search(r'/users/(\d+)', profile_url)
                if not match:
                    continue
                user_id = match.group(1)
                if nickname.strip().lower() in ["–ø—Ä–æ—Ñ–∏–ª—å", "–ª–∞–æ"]:
                    continue
                dedup[user_id] = (profile_url, nickname, wins, draws, losses)

            profiles_results = list(dedup.values())

            total_players = len(profiles_results)
            active_count = sum(1 for (_, _, w, d, l) in profiles_results if (w + d + l) > 0)
            inactive_count = total_players - active_count

            for (profile_url, nickname, wins, draws, losses) in profiles_results:
                results.append({
                    "–ü—Ä–æ—Ñ–∏–ª—å": f'<a href="{profile_url}" target="_blank">{nickname}</a>',
                    "–ü–æ–±–µ–¥": wins,
                    "–ù–∏—á—å–∏—Ö": draws,
                    "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": losses
                })

            summary = f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}, –∏–∑ –Ω–∏—Ö –∏–≥—Ä–∞–ª–∏: {active_count}, –∏–∑ –Ω–∏—Ö –Ω–µ –∏–≥—Ä–∞–ª–∏: {inactive_count}"
            results.append({
                "–ü—Ä–æ—Ñ–∏–ª—å": f"<b>{summary}</b>",
                "–ü–æ–±–µ–¥": "",
                "–ù–∏—á—å–∏—Ö": "",
                "–ü–æ—Ä–∞–∂–µ–Ω–∏–π": ""
            })

            await page.close()

        await context.close()
        await browser.close()

    return results

def statistics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π"""
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π")

    mode_choice = st.selectbox("–°—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ:", ("–ü—Ä–æ—Ñ–∏–ª—é", "–°–æ—é–∑—É"))
    period_mode = st.selectbox("–†–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞", ("–î–µ–Ω—å", "–ò–Ω—Ç–µ—Ä–≤–∞–ª"))

    if period_mode == "–î–µ–Ω—å":
        day = st.text_input("–î–∞—Ç–∞ (–î–î.–ú–ú):", value=datetime.now().strftime("%d.%m"))
        year = datetime.now().year
        filter_from = datetime.strptime(f"{day}.{year} 00:00", "%d.%m.%Y %H:%M")
        filter_to = datetime.strptime(f"{day}.{year} 23:59", "%d.%m.%Y %H:%M")
    else:
        dt_from = st.text_input("–û—Ç (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):", value="01.01.2021 00:00")
        dt_to = st.text_input("–î–æ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):", value="31.12.2021 23:59")
        filter_from = datetime.strptime(dt_from, "%d.%m.%Y %H:%M")
        filter_to = datetime.strptime(dt_to, "%d.%m.%Y %H:%M")

    if mode_choice == "–ü—Ä–æ—Ñ–∏–ª—é":
        target_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –ø—Ä–æ—Ñ–∏–ª—è:", value="https://11x11.ru/users/3941656")
    else:
        target_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL —Å–æ—é–∑–∞:", value="https://11x11.ru/guilds/139")

    if st.button("–°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        login = "–ª–∞–æ"
        password = "111333555"
        st.write("üïí –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")

        try:
            results = asyncio.run(async_main(mode_choice, target_url, filter_from, filter_to, login, password))
        except RuntimeError:
            st.write("‚ùå –û—à–∏–±–∫–∞: `asyncio.run()` –Ω–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ event loop.")
            return

        if results:
            df = pd.DataFrame(results)
            st.markdown(df.to_html(escape=False, index=False), unsafe_allow_html=True)
        else:
            st.write("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
